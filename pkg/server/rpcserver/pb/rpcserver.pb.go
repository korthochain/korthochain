// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.6.1
// source: rpcserver.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReqBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *ReqBlock) Reset() {
	*x = ReqBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBlock) ProtoMessage() {}

func (x *ReqBlock) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBlock.ProtoReflect.Descriptor instead.
func (*ReqBlock) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{0}
}

func (x *ReqBlock) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type ReqBlockheight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *ReqBlockheight) Reset() {
	*x = ReqBlockheight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBlockheight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBlockheight) ProtoMessage() {}

func (x *ReqBlockheight) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBlockheight.ProtoReflect.Descriptor instead.
func (*ReqBlockheight) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{1}
}

func (x *ReqBlockheight) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type RespBlockhashs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hashs [][]byte `protobuf:"bytes,1,rep,name=Hashs,proto3" json:"Hashs,omitempty"`
}

func (x *RespBlockhashs) Reset() {
	*x = RespBlockhashs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespBlockhashs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespBlockhashs) ProtoMessage() {}

func (x *RespBlockhashs) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespBlockhashs.ProtoReflect.Descriptor instead.
func (*RespBlockhashs) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{2}
}

func (x *RespBlockhashs) GetHashs() [][]byte {
	if x != nil {
		return x.Hashs
	}
	return nil
}

type RespBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RespBlock) Reset() {
	*x = RespBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespBlock) ProtoMessage() {}

func (x *RespBlock) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespBlock.ProtoReflect.Descriptor instead.
func (*RespBlock) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{3}
}

func (x *RespBlock) GetCode() uint64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RespBlock) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RespBlock) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ReqBlockTip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReqBlockTip) Reset() {
	*x = ReqBlockTip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBlockTip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBlockTip) ProtoMessage() {}

func (x *ReqBlockTip) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBlockTip.ProtoReflect.Descriptor instead.
func (*ReqBlockTip) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{4}
}

type ReqBlockchain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Hash   []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *ReqBlockchain) Reset() {
	*x = ReqBlockchain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBlockchain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBlockchain) ProtoMessage() {}

func (x *ReqBlockchain) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBlockchain.ProtoReflect.Descriptor instead.
func (*ReqBlockchain) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{5}
}

func (x *ReqBlockchain) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ReqBlockchain) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type RespBlockchain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Hashs         [][]byte `protobuf:"bytes,2,rep,name=Hashs,proto3" json:"Hashs,omitempty"`
	Issamechain   bool     `protobuf:"varint,3,opt,name=issamechain,proto3" json:"issamechain,omitempty"`
	Isbranchchain bool     `protobuf:"varint,4,opt,name=isbranchchain,proto3" json:"isbranchchain,omitempty"`
	Heigher       bool     `protobuf:"varint,5,opt,name=heigher,proto3" json:"heigher,omitempty"`
	Height        uint64   `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *RespBlockchain) Reset() {
	*x = RespBlockchain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespBlockchain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespBlockchain) ProtoMessage() {}

func (x *RespBlockchain) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespBlockchain.ProtoReflect.Descriptor instead.
func (*RespBlockchain) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{6}
}

func (x *RespBlockchain) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RespBlockchain) GetHashs() [][]byte {
	if x != nil {
		return x.Hashs
	}
	return nil
}

func (x *RespBlockchain) GetIssamechain() bool {
	if x != nil {
		return x.Issamechain
	}
	return false
}

func (x *RespBlockchain) GetIsbranchchain() bool {
	if x != nil {
		return x.Isbranchchain
	}
	return false
}

func (x *RespBlockchain) GetHeigher() bool {
	if x != nil {
		return x.Heigher
	}
	return false
}

func (x *RespBlockchain) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type BlockHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *BlockHash) Reset() {
	*x = BlockHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHash) ProtoMessage() {}

func (x *BlockHash) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHash.ProtoReflect.Descriptor instead.
func (*BlockHash) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{7}
}

func (x *BlockHash) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type Req_IPAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Req_IPAddress) Reset() {
	*x = Req_IPAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req_IPAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req_IPAddress) ProtoMessage() {}

func (x *Req_IPAddress) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req_IPAddress.ProtoReflect.Descriptor instead.
func (*Req_IPAddress) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{8}
}

type Resp_IPAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []string `protobuf:"bytes,1,rep,name=address,proto3" json:"address,omitempty"`
}

func (x *Resp_IPAddress) Reset() {
	*x = Resp_IPAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resp_IPAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resp_IPAddress) ProtoMessage() {}

func (x *Resp_IPAddress) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resp_IPAddress.ProtoReflect.Descriptor instead.
func (*Resp_IPAddress) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{9}
}

func (x *Resp_IPAddress) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

type ReqTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *ReqTx) Reset() {
	*x = ReqTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqTx) ProtoMessage() {}

func (x *ReqTx) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqTx.ProtoReflect.Descriptor instead.
func (*ReqTx) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{10}
}

func (x *ReqTx) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type RespTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RespTx) Reset() {
	*x = RespTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespTx) ProtoMessage() {}

func (x *RespTx) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespTx.ProtoReflect.Descriptor instead.
func (*RespTx) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{11}
}

type ReqTxhash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReqTxhash) Reset() {
	*x = ReqTxhash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqTxhash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqTxhash) ProtoMessage() {}

func (x *ReqTxhash) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqTxhash.ProtoReflect.Descriptor instead.
func (*ReqTxhash) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{12}
}

type RespTxhash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txs [][]byte `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (x *RespTxhash) Reset() {
	*x = RespTxhash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespTxhash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespTxhash) ProtoMessage() {}

func (x *RespTxhash) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespTxhash.ProtoReflect.Descriptor instead.
func (*RespTxhash) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{13}
}

func (x *RespTxhash) GetTxs() [][]byte {
	if x != nil {
		return x.Txs
	}
	return nil
}

type ReqSendBlcok struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Genesishash string `protobuf:"bytes,1,opt,name=genesishash,proto3" json:"genesishash,omitempty"`
	Block       []byte `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *ReqSendBlcok) Reset() {
	*x = ReqSendBlcok{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendBlcok) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendBlcok) ProtoMessage() {}

func (x *ReqSendBlcok) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendBlcok.ProtoReflect.Descriptor instead.
func (*ReqSendBlcok) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{14}
}

func (x *ReqSendBlcok) GetGenesishash() string {
	if x != nil {
		return x.Genesishash
	}
	return ""
}

func (x *ReqSendBlcok) GetBlock() []byte {
	if x != nil {
		return x.Block
	}
	return nil
}

type RespSendBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RespSendBlock) Reset() {
	*x = RespSendBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespSendBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespSendBlock) ProtoMessage() {}

func (x *RespSendBlock) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespSendBlock.ProtoReflect.Descriptor instead.
func (*RespSendBlock) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{15}
}

type StreamReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int64  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Hash   []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Flag   bool   `protobuf:"varint,3,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *StreamReqData) Reset() {
	*x = StreamReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReqData) ProtoMessage() {}

func (x *StreamReqData) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReqData.ProtoReflect.Descriptor instead.
func (*StreamReqData) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{16}
}

func (x *StreamReqData) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *StreamReqData) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *StreamReqData) GetFlag() bool {
	if x != nil {
		return x.Flag
	}
	return false
}

type StreamResData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int64  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Hash   []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Flag   bool   `protobuf:"varint,3,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *StreamResData) Reset() {
	*x = StreamResData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamResData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResData) ProtoMessage() {}

func (x *StreamResData) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResData.ProtoReflect.Descriptor instead.
func (*StreamResData) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{17}
}

func (x *StreamResData) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *StreamResData) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *StreamResData) GetFlag() bool {
	if x != nil {
		return x.Flag
	}
	return false
}

type ReqBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Hash   []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *ReqBranch) Reset() {
	*x = ReqBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBranch) ProtoMessage() {}

func (x *ReqBranch) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBranch.ProtoReflect.Descriptor instead.
func (*ReqBranch) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{18}
}

func (x *ReqBranch) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ReqBranch) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type RespBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Exist  bool   `protobuf:"varint,2,opt,name=exist,proto3" json:"exist,omitempty"`
}

func (x *RespBranch) Reset() {
	*x = RespBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespBranch) ProtoMessage() {}

func (x *RespBranch) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespBranch.ProtoReflect.Descriptor instead.
func (*RespBranch) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{19}
}

func (x *RespBranch) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *RespBranch) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

type ReqVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReqVersion) Reset() {
	*x = ReqVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqVersion) ProtoMessage() {}

func (x *ReqVersion) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqVersion.ProtoReflect.Descriptor instead.
func (*ReqVersion) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{20}
}

type RespVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Versioninfo string `protobuf:"bytes,1,opt,name=versioninfo,proto3" json:"versioninfo,omitempty"`
}

func (x *RespVersion) Reset() {
	*x = RespVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcserver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespVersion) ProtoMessage() {}

func (x *RespVersion) ProtoReflect() protoreflect.Message {
	mi := &file_rpcserver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespVersion.ProtoReflect.Descriptor instead.
func (*RespVersion) Descriptor() ([]byte, []int) {
	return file_rpcserver_proto_rawDescGZIP(), []int{21}
}

func (x *RespVersion) GetVersioninfo() string {
	if x != nil {
		return x.Versioninfo
	}
	return ""
}

var File_rpcserver_proto protoreflect.FileDescriptor

var file_rpcserver_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x70, 0x63, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0x1f, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x29, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x27, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68,
	0x61, 0x73, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x48, 0x61, 0x73, 0x68, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x05, 0x48, 0x61, 0x73, 0x68, 0x73, 0x22, 0x4e, 0x0a, 0x0a, 0x52, 0x65,
	0x73, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x52, 0x65,
	0x71, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x70, 0x22, 0x3c, 0x0a, 0x0e, 0x52,
	0x65, 0x71, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xb5, 0x01, 0x0a, 0x0f, 0x52, 0x65,
	0x73, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x48, 0x61, 0x73, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x05, 0x48, 0x61, 0x73, 0x68, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x61, 0x6d,
	0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x73, 0x61, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x73, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x68, 0x65, 0x69, 0x67, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x68, 0x65, 0x69, 0x67, 0x68, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x1f, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x22, 0x10, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x5f, 0x49, 0x50, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x2b, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x5f, 0x49, 0x50, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x71, 0x5f, 0x74, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22,
	0x09, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x70, 0x5f, 0x74, 0x78, 0x22, 0x0c, 0x0a, 0x0a, 0x52, 0x65,
	0x71, 0x5f, 0x74, 0x78, 0x68, 0x61, 0x73, 0x68, 0x22, 0x1f, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x70,
	0x5f, 0x74, 0x78, 0x68, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x03, 0x74, 0x78, 0x73, 0x22, 0x48, 0x0a, 0x0e, 0x52, 0x65, 0x71,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x63, 0x6f, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x22, 0x11, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x4f, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x4f, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x38, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x5f,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x22, 0x3b, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x70, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x22,
	0x0d, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x30,
	0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x66, 0x6f,
	0x32, 0x93, 0x05, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x47, 0x72, 0x65, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x29, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x41, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x73, 0x42, 0x79,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x73,
	0x12, 0x30, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x70, 0x12,
	0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x70, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x38, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x5f, 0x49, 0x50, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x5f, 0x49, 0x50, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x5f, 0x74, 0x78, 0x1a, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x5f, 0x74, 0x78,
	0x12, 0x32, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x5f, 0x74, 0x78, 0x68,
	0x61, 0x73, 0x68, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x5f, 0x74, 0x78,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x62, 0x6c, 0x63, 0x6f, 0x6b, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x0e, 0x53, 0x79,
	0x6e, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x0d, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a,
	0x09, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x11, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2e, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpcserver_proto_rawDescOnce sync.Once
	file_rpcserver_proto_rawDescData = file_rpcserver_proto_rawDesc
)

func file_rpcserver_proto_rawDescGZIP() []byte {
	file_rpcserver_proto_rawDescOnce.Do(func() {
		file_rpcserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpcserver_proto_rawDescData)
	})
	return file_rpcserver_proto_rawDescData
}

var file_rpcserver_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_rpcserver_proto_goTypes = []interface{}{
	(*ReqBlock)(nil),       // 0: pb.Req_block
	(*ReqBlockheight)(nil), // 1: pb.Req_blockheight
	(*RespBlockhashs)(nil), // 2: pb.Resp_blockhashs
	(*RespBlock)(nil),      // 3: pb.Resp_block
	(*ReqBlockTip)(nil),    // 4: pb.Req_block_tip
	(*ReqBlockchain)(nil),  // 5: pb.Req_blockchain
	(*RespBlockchain)(nil), // 6: pb.Resp_blockchain
	(*BlockHash)(nil),      // 7: pb.BlockHash
	(*Req_IPAddress)(nil),  // 8: pb.Req_IP_address
	(*Resp_IPAddress)(nil), // 9: pb.Resp_IP_address
	(*ReqTx)(nil),          // 10: pb.Req_tx
	(*RespTx)(nil),         // 11: pb.Resp_tx
	(*ReqTxhash)(nil),      // 12: pb.Req_txhash
	(*RespTxhash)(nil),     // 13: pb.Resp_txhash
	(*ReqSendBlcok)(nil),   // 14: pb.Req_send_blcok
	(*RespSendBlock)(nil),  // 15: pb.Resp_send_block
	(*StreamReqData)(nil),  // 16: pb.StreamReqData
	(*StreamResData)(nil),  // 17: pb.StreamResData
	(*ReqBranch)(nil),      // 18: pb.Req_branch
	(*RespBranch)(nil),     // 19: pb.Resp_branch
	(*ReqVersion)(nil),     // 20: pb.Req_version
	(*RespVersion)(nil),    // 21: pb.Resp_version
}
var file_rpcserver_proto_depIdxs = []int32{
	0,  // 0: pb.InsideGreeter.GetBlock:input_type -> pb.Req_block
	1,  // 1: pb.InsideGreeter.GetBlockHashsByHeight:input_type -> pb.Req_blockheight
	4,  // 2: pb.InsideGreeter.GetBlockTip:input_type -> pb.Req_block_tip
	5,  // 3: pb.InsideGreeter.GetBlockchain:input_type -> pb.Req_blockchain
	8,  // 4: pb.InsideGreeter.GetIPAddress:input_type -> pb.Req_IP_address
	10, // 5: pb.InsideGreeter.GetTransaction:input_type -> pb.Req_tx
	12, // 6: pb.InsideGreeter.GetTransactions:input_type -> pb.Req_txhash
	14, // 7: pb.InsideGreeter.SendBlock:input_type -> pb.Req_send_blcok
	5,  // 8: pb.InsideGreeter.SyncBlockchain:input_type -> pb.Req_blockchain
	18, // 9: pb.InsideGreeter.FindbranchPoint:input_type -> pb.Req_branch
	20, // 10: pb.InsideGreeter.VerifyVersion:input_type -> pb.Req_version
	16, // 11: pb.InsideGreeter.AllStream:input_type -> pb.StreamReqData
	3,  // 12: pb.InsideGreeter.GetBlock:output_type -> pb.Resp_block
	2,  // 13: pb.InsideGreeter.GetBlockHashsByHeight:output_type -> pb.Resp_blockhashs
	3,  // 14: pb.InsideGreeter.GetBlockTip:output_type -> pb.Resp_block
	6,  // 15: pb.InsideGreeter.GetBlockchain:output_type -> pb.Resp_blockchain
	9,  // 16: pb.InsideGreeter.GetIPAddress:output_type -> pb.Resp_IP_address
	11, // 17: pb.InsideGreeter.GetTransaction:output_type -> pb.Resp_tx
	13, // 18: pb.InsideGreeter.GetTransactions:output_type -> pb.Resp_txhash
	15, // 19: pb.InsideGreeter.SendBlock:output_type -> pb.Resp_send_block
	6,  // 20: pb.InsideGreeter.SyncBlockchain:output_type -> pb.Resp_blockchain
	19, // 21: pb.InsideGreeter.FindbranchPoint:output_type -> pb.Resp_branch
	21, // 22: pb.InsideGreeter.VerifyVersion:output_type -> pb.Resp_version
	17, // 23: pb.InsideGreeter.AllStream:output_type -> pb.StreamResData
	12, // [12:24] is the sub-list for method output_type
	0,  // [0:12] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_rpcserver_proto_init() }
func file_rpcserver_proto_init() {
	if File_rpcserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpcserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBlockheight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespBlockhashs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBlockTip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBlockchain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespBlockchain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req_IPAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resp_IPAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcserver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqTxhash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcserver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespTxhash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcserver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendBlcok); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcserver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespSendBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcserver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcserver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamResData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcserver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcserver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcserver_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcserver_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpcserver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpcserver_proto_goTypes,
		DependencyIndexes: file_rpcserver_proto_depIdxs,
		MessageInfos:      file_rpcserver_proto_msgTypes,
	}.Build()
	File_rpcserver_proto = out.File
	file_rpcserver_proto_rawDesc = nil
	file_rpcserver_proto_goTypes = nil
	file_rpcserver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InsideGreeterClient is the client API for InsideGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InsideGreeterClient interface {
	GetBlock(ctx context.Context, in *ReqBlock, opts ...grpc.CallOption) (*RespBlock, error)
	GetBlockHashsByHeight(ctx context.Context, in *ReqBlockheight, opts ...grpc.CallOption) (*RespBlockhashs, error)
	GetBlockTip(ctx context.Context, in *ReqBlockTip, opts ...grpc.CallOption) (*RespBlock, error)
	GetBlockchain(ctx context.Context, in *ReqBlockchain, opts ...grpc.CallOption) (*RespBlockchain, error)
	GetIPAddress(ctx context.Context, in *Req_IPAddress, opts ...grpc.CallOption) (*Resp_IPAddress, error)
	GetTransaction(ctx context.Context, in *ReqTx, opts ...grpc.CallOption) (*RespTx, error)
	GetTransactions(ctx context.Context, in *ReqTxhash, opts ...grpc.CallOption) (*RespTxhash, error)
	SendBlock(ctx context.Context, in *ReqSendBlcok, opts ...grpc.CallOption) (*RespSendBlock, error)
	SyncBlockchain(ctx context.Context, in *ReqBlockchain, opts ...grpc.CallOption) (*RespBlockchain, error)
	FindbranchPoint(ctx context.Context, in *ReqBranch, opts ...grpc.CallOption) (*RespBranch, error)
	VerifyVersion(ctx context.Context, in *ReqVersion, opts ...grpc.CallOption) (*RespVersion, error)
	AllStream(ctx context.Context, opts ...grpc.CallOption) (InsideGreeter_AllStreamClient, error)
}

type insideGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewInsideGreeterClient(cc grpc.ClientConnInterface) InsideGreeterClient {
	return &insideGreeterClient{cc}
}

func (c *insideGreeterClient) GetBlock(ctx context.Context, in *ReqBlock, opts ...grpc.CallOption) (*RespBlock, error) {
	out := new(RespBlock)
	err := c.cc.Invoke(ctx, "/pb.InsideGreeter/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insideGreeterClient) GetBlockHashsByHeight(ctx context.Context, in *ReqBlockheight, opts ...grpc.CallOption) (*RespBlockhashs, error) {
	out := new(RespBlockhashs)
	err := c.cc.Invoke(ctx, "/pb.InsideGreeter/GetBlockHashsByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insideGreeterClient) GetBlockTip(ctx context.Context, in *ReqBlockTip, opts ...grpc.CallOption) (*RespBlock, error) {
	out := new(RespBlock)
	err := c.cc.Invoke(ctx, "/pb.InsideGreeter/GetBlockTip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insideGreeterClient) GetBlockchain(ctx context.Context, in *ReqBlockchain, opts ...grpc.CallOption) (*RespBlockchain, error) {
	out := new(RespBlockchain)
	err := c.cc.Invoke(ctx, "/pb.InsideGreeter/GetBlockchain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insideGreeterClient) GetIPAddress(ctx context.Context, in *Req_IPAddress, opts ...grpc.CallOption) (*Resp_IPAddress, error) {
	out := new(Resp_IPAddress)
	err := c.cc.Invoke(ctx, "/pb.InsideGreeter/GetIPAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insideGreeterClient) GetTransaction(ctx context.Context, in *ReqTx, opts ...grpc.CallOption) (*RespTx, error) {
	out := new(RespTx)
	err := c.cc.Invoke(ctx, "/pb.InsideGreeter/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insideGreeterClient) GetTransactions(ctx context.Context, in *ReqTxhash, opts ...grpc.CallOption) (*RespTxhash, error) {
	out := new(RespTxhash)
	err := c.cc.Invoke(ctx, "/pb.InsideGreeter/GetTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insideGreeterClient) SendBlock(ctx context.Context, in *ReqSendBlcok, opts ...grpc.CallOption) (*RespSendBlock, error) {
	out := new(RespSendBlock)
	err := c.cc.Invoke(ctx, "/pb.InsideGreeter/SendBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insideGreeterClient) SyncBlockchain(ctx context.Context, in *ReqBlockchain, opts ...grpc.CallOption) (*RespBlockchain, error) {
	out := new(RespBlockchain)
	err := c.cc.Invoke(ctx, "/pb.InsideGreeter/SyncBlockchain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insideGreeterClient) FindbranchPoint(ctx context.Context, in *ReqBranch, opts ...grpc.CallOption) (*RespBranch, error) {
	out := new(RespBranch)
	err := c.cc.Invoke(ctx, "/pb.InsideGreeter/FindbranchPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insideGreeterClient) VerifyVersion(ctx context.Context, in *ReqVersion, opts ...grpc.CallOption) (*RespVersion, error) {
	out := new(RespVersion)
	err := c.cc.Invoke(ctx, "/pb.InsideGreeter/VerifyVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insideGreeterClient) AllStream(ctx context.Context, opts ...grpc.CallOption) (InsideGreeter_AllStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_InsideGreeter_serviceDesc.Streams[0], "/pb.InsideGreeter/AllStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &insideGreeterAllStreamClient{stream}
	return x, nil
}

type InsideGreeter_AllStreamClient interface {
	Send(*StreamReqData) error
	Recv() (*StreamResData, error)
	grpc.ClientStream
}

type insideGreeterAllStreamClient struct {
	grpc.ClientStream
}

func (x *insideGreeterAllStreamClient) Send(m *StreamReqData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *insideGreeterAllStreamClient) Recv() (*StreamResData, error) {
	m := new(StreamResData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InsideGreeterServer is the server API for InsideGreeter service.
type InsideGreeterServer interface {
	GetBlock(context.Context, *ReqBlock) (*RespBlock, error)
	GetBlockHashsByHeight(context.Context, *ReqBlockheight) (*RespBlockhashs, error)
	GetBlockTip(context.Context, *ReqBlockTip) (*RespBlock, error)
	GetBlockchain(context.Context, *ReqBlockchain) (*RespBlockchain, error)
	GetIPAddress(context.Context, *Req_IPAddress) (*Resp_IPAddress, error)
	GetTransaction(context.Context, *ReqTx) (*RespTx, error)
	GetTransactions(context.Context, *ReqTxhash) (*RespTxhash, error)
	SendBlock(context.Context, *ReqSendBlcok) (*RespSendBlock, error)
	SyncBlockchain(context.Context, *ReqBlockchain) (*RespBlockchain, error)
	FindbranchPoint(context.Context, *ReqBranch) (*RespBranch, error)
	VerifyVersion(context.Context, *ReqVersion) (*RespVersion, error)
	AllStream(InsideGreeter_AllStreamServer) error
}

// UnimplementedInsideGreeterServer can be embedded to have forward compatible implementations.
type UnimplementedInsideGreeterServer struct {
}

func (*UnimplementedInsideGreeterServer) GetBlock(context.Context, *ReqBlock) (*RespBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedInsideGreeterServer) GetBlockHashsByHeight(context.Context, *ReqBlockheight) (*RespBlockhashs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHashsByHeight not implemented")
}
func (*UnimplementedInsideGreeterServer) GetBlockTip(context.Context, *ReqBlockTip) (*RespBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockTip not implemented")
}
func (*UnimplementedInsideGreeterServer) GetBlockchain(context.Context, *ReqBlockchain) (*RespBlockchain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockchain not implemented")
}
func (*UnimplementedInsideGreeterServer) GetIPAddress(context.Context, *Req_IPAddress) (*Resp_IPAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPAddress not implemented")
}
func (*UnimplementedInsideGreeterServer) GetTransaction(context.Context, *ReqTx) (*RespTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (*UnimplementedInsideGreeterServer) GetTransactions(context.Context, *ReqTxhash) (*RespTxhash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (*UnimplementedInsideGreeterServer) SendBlock(context.Context, *ReqSendBlcok) (*RespSendBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBlock not implemented")
}
func (*UnimplementedInsideGreeterServer) SyncBlockchain(context.Context, *ReqBlockchain) (*RespBlockchain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncBlockchain not implemented")
}
func (*UnimplementedInsideGreeterServer) FindbranchPoint(context.Context, *ReqBranch) (*RespBranch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindbranchPoint not implemented")
}
func (*UnimplementedInsideGreeterServer) VerifyVersion(context.Context, *ReqVersion) (*RespVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyVersion not implemented")
}
func (*UnimplementedInsideGreeterServer) AllStream(InsideGreeter_AllStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AllStream not implemented")
}

func RegisterInsideGreeterServer(s *grpc.Server, srv InsideGreeterServer) {
	s.RegisterService(&_InsideGreeter_serviceDesc, srv)
}

func _InsideGreeter_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsideGreeterServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.InsideGreeter/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsideGreeterServer).GetBlock(ctx, req.(*ReqBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsideGreeter_GetBlockHashsByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBlockheight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsideGreeterServer).GetBlockHashsByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.InsideGreeter/GetBlockHashsByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsideGreeterServer).GetBlockHashsByHeight(ctx, req.(*ReqBlockheight))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsideGreeter_GetBlockTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBlockTip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsideGreeterServer).GetBlockTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.InsideGreeter/GetBlockTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsideGreeterServer).GetBlockTip(ctx, req.(*ReqBlockTip))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsideGreeter_GetBlockchain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBlockchain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsideGreeterServer).GetBlockchain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.InsideGreeter/GetBlockchain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsideGreeterServer).GetBlockchain(ctx, req.(*ReqBlockchain))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsideGreeter_GetIPAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_IPAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsideGreeterServer).GetIPAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.InsideGreeter/GetIPAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsideGreeterServer).GetIPAddress(ctx, req.(*Req_IPAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsideGreeter_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsideGreeterServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.InsideGreeter/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsideGreeterServer).GetTransaction(ctx, req.(*ReqTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsideGreeter_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqTxhash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsideGreeterServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.InsideGreeter/GetTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsideGreeterServer).GetTransactions(ctx, req.(*ReqTxhash))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsideGreeter_SendBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendBlcok)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsideGreeterServer).SendBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.InsideGreeter/SendBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsideGreeterServer).SendBlock(ctx, req.(*ReqSendBlcok))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsideGreeter_SyncBlockchain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBlockchain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsideGreeterServer).SyncBlockchain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.InsideGreeter/SyncBlockchain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsideGreeterServer).SyncBlockchain(ctx, req.(*ReqBlockchain))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsideGreeter_FindbranchPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBranch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsideGreeterServer).FindbranchPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.InsideGreeter/FindbranchPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsideGreeterServer).FindbranchPoint(ctx, req.(*ReqBranch))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsideGreeter_VerifyVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsideGreeterServer).VerifyVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.InsideGreeter/VerifyVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsideGreeterServer).VerifyVersion(ctx, req.(*ReqVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsideGreeter_AllStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InsideGreeterServer).AllStream(&insideGreeterAllStreamServer{stream})
}

type InsideGreeter_AllStreamServer interface {
	Send(*StreamResData) error
	Recv() (*StreamReqData, error)
	grpc.ServerStream
}

type insideGreeterAllStreamServer struct {
	grpc.ServerStream
}

func (x *insideGreeterAllStreamServer) Send(m *StreamResData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *insideGreeterAllStreamServer) Recv() (*StreamReqData, error) {
	m := new(StreamReqData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _InsideGreeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.InsideGreeter",
	HandlerType: (*InsideGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlock",
			Handler:    _InsideGreeter_GetBlock_Handler,
		},
		{
			MethodName: "GetBlockHashsByHeight",
			Handler:    _InsideGreeter_GetBlockHashsByHeight_Handler,
		},
		{
			MethodName: "GetBlockTip",
			Handler:    _InsideGreeter_GetBlockTip_Handler,
		},
		{
			MethodName: "GetBlockchain",
			Handler:    _InsideGreeter_GetBlockchain_Handler,
		},
		{
			MethodName: "GetIPAddress",
			Handler:    _InsideGreeter_GetIPAddress_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _InsideGreeter_GetTransaction_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _InsideGreeter_GetTransactions_Handler,
		},
		{
			MethodName: "SendBlock",
			Handler:    _InsideGreeter_SendBlock_Handler,
		},
		{
			MethodName: "SyncBlockchain",
			Handler:    _InsideGreeter_SyncBlockchain_Handler,
		},
		{
			MethodName: "FindbranchPoint",
			Handler:    _InsideGreeter_FindbranchPoint_Handler,
		},
		{
			MethodName: "VerifyVersion",
			Handler:    _InsideGreeter_VerifyVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AllStream",
			Handler:       _InsideGreeter_AllStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpcserver.proto",
}
